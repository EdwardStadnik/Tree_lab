#include <algorithm>
#include <new>
#include <iostream>
#include <stdlib.h>

using namespace std;



class AVL {
public:
	struct Node {
		int key;
		unsigned int h;
		Node* left, * right;
		int dif = height(left) - height(right);
		Node() { key; h; left = right = NULL; dif; }
	};
	Node* root;
	AVL();
	~AVL();
	void insert(int x) {
		root = insert(root, x);
	}
	void erase(int x) {
		root = erase(root, x);
	}
	bool find(int x) {
		find(root, x);
	}
private:
	Node* balance(Node*);
	Node* newNode(int);
	unsigned int height(Node*);
	void recalc_h(Node*);
	Node* insert(Node*, int);
	Node* get_min(Node*);
	Node* removemin(Node*);
	Node* erase(Node*, int);
	bool find(Node*, int);
	Node* left_rotate(Node*);
	Node* right_rotate(Node*);
};

AVL::Node* AVL::newNode(int key)
{
	AVL::Node* node = new AVL::Node();
	node->key = key;
	node->left = NULL;
	node->right = NULL;
	node->h = 1;
	return node;
}

unsigned int AVL::height(AVL::Node* p) {
	if (p) {
		return p->h;
	}
	return 0;
}

void AVL::recalc_h(AVL::Node* p) {
	if (!p) {
		return;
	}
	if (p) {
		p->h = max(height(p->left), height(p->right)) + 1;
	}
}
AVL::Node* AVL::right_rotate(AVL::Node* p) {
	AVL::Node* q = p->left;
	p->left = q->right;
	q->right = p;
	recalc_h(p);
	recalc_h(q);
	return q;
}

AVL::Node* AVL::left_rotate(AVL::Node* p) {
	AVL::Node* q = p->right;
	p->right = q->left;
	q->left = p;
	recalc_h(p);
	recalc_h(q);
	return q;
}

AVL::Node* AVL::balance(AVL::Node* p) {
	if (!p) {
		return NULL;
	}
	recalc_h(p);
	if (p->dif > 1) {
		if (p->left->dif < 0) {
			p->left = left_rotate(p->left);
		}
		p = right_rotate(p);
	}
	if (p->dif < -1) {
		if (p->right->dif > 0) {
			p->right = right_rotate(p->right);
		}
		p = left_rotate(p);
	}
	return p;
}

AVL::Node* AVL::insert(AVL::Node* p, int x) {
	if (!p) {
		return newNode(x);
	}
	if (p->key < x) {
		p->right = insert(p->right, x);
	}
	if (p->key > x) {
		p->left = insert(p->left, x);
	}
	return balance(p);
}

AVL::Node* AVL::get_min(AVL::Node* p) {
	if (p->left) {
		return get_min(p->left);
	}
	return p;
}

AVL::Node* AVL::removemin(AVL::Node* p) 
{
	if (p->left == 0)
		return p->right;
	p->left = removemin(p->left);
	return balance(p);
}

AVL::Node* AVL::erase(AVL::Node* p, int key) {
	if (!p) {
		return NULL;
	}
	if (p->key < key) {
	p->right = erase(p->right, key);
	}
	if (p->key > key) {
	p->left = erase(p->left, key);
	}
	else {
		AVL::Node* l = p->left;
		AVL::Node* r = p->right;
		delete p;
		if (!r) {
			return l;
		}
		else {
			AVL::Node* min = get_min(r);
			min->right = removemin(r);
			min->left = l;
			return balance(min);
		}
	}
	return balance(p);
}


bool AVL::find(AVL::Node* p, int key) {
	if (!p) {
		return false;
	}
	if (p->key > key) {
		return find(p->left, key);
	}
	if (p->key < key) {
		return find(p->right, key);
	}
	return true;
}
